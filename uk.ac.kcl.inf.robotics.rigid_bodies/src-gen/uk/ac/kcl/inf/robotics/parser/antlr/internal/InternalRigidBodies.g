/*
 * generated by Xtext
 */
grammar InternalRigidBodies;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package uk.ac.kcl.inf.robotics.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.robotics.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.robotics.services.RigidBodiesGrammarAccess;

}

@parser::members {

 	private RigidBodiesGrammarAccess grammarAccess;
 	
    public InternalRigidBodiesParser(TokenStream input, RigidBodiesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected RigidBodiesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRigidBodiesRigidBodyParserRuleCall_0()); 
	    }
		lv_rigidBodies_0_0=ruleRigidBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"rigidBodies",
        		lv_rigidBodies_0_0, 
        		"RigidBody");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleRigidBody
entryRuleRigidBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRigidBodyRule()); }
	 iv_ruleRigidBody=ruleRigidBody 
	 { $current=$iv_ruleRigidBody.current; } 
	 EOF 
;

// Rule RigidBody
ruleRigidBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rigid_body' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRigidBodyAccess().getRigid_bodyKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRigidBodyAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRigidBodyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRigidBodyAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRigidBodyAccess().getJointsJointParserRuleCall_3_0()); 
	    }
		lv_joints_3_0=ruleJoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRigidBodyRule());
	        }
       		add(
       			$current, 
       			"joints",
        		lv_joints_3_0, 
        		"Joint");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getRigidBodyAccess().getMassesMassParserRuleCall_4_0()); 
	    }
		lv_masses_4_0=ruleMass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRigidBodyRule());
	        }
       		add(
       			$current, 
       			"masses",
        		lv_masses_4_0, 
        		"Mass");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getRigidBodyAccess().getConstraintsConstraintParserRuleCall_5_0()); 
	    }
		lv_constraints_5_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRigidBodyRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_5_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRigidBodyAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleJoint
entryRuleJoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJointRule()); }
	 iv_ruleJoint=ruleJoint 
	 { $current=$iv_ruleJoint.current; } 
	 EOF 
;

// Rule Joint
ruleJoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='joint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJointAccess().getJointKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getJointAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleMass
entryRuleMass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMassRule()); }
	 iv_ruleMass=ruleMass 
	 { $current=$iv_ruleMass.current; } 
	 EOF 
;

// Rule Mass
ruleMass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mass' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMassAccess().getMassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMassAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_value_2_0=RULE_REAL
		{
			newLeafNode(lv_value_2_0, grammarAccess.getMassAccess().getValueREALTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"REAL");
	    }

)
)	otherlv_3='kg' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMassAccess().getKgKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMassAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMassAccess().getTransformationsTransformationParserRuleCall_5_0()); 
	    }
		lv_transformations_5_0=ruleTransformation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMassRule());
	        }
       		add(
       			$current, 
       			"transformations",
        		lv_transformations_5_0, 
        		"Transformation");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMassAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleTransformation
entryRuleTransformation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationRule()); }
	 iv_ruleTransformation=ruleTransformation 
	 { $current=$iv_ruleTransformation.current; } 
	 EOF 
;

// Rule Transformation
ruleTransformation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='transformation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransformationAccess().getTransformationKeyword_0());
    }
	otherlv_1='relative' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransformationAccess().getRelativeKeyword_1());
    }
	otherlv_2='to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransformationAccess().getToKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getTransformationAccess().getJointJointCrossReference_3_0()); 
	}

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransformationAccess().getLeftParenthesisKeyword_4());
    }
this_REAL_5=RULE_REAL
    { 
    newLeafNode(this_REAL_5, grammarAccess.getTransformationAccess().getREALTerminalRuleCall_5()); 
    }
	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTransformationAccess().getCommaKeyword_6());
    }
this_REAL_7=RULE_REAL
    { 
    newLeafNode(this_REAL_7, grammarAccess.getTransformationAccess().getREALTerminalRuleCall_7()); 
    }
	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTransformationAccess().getCommaKeyword_8());
    }
this_REAL_9=RULE_REAL
    { 
    newLeafNode(this_REAL_9, grammarAccess.getTransformationAccess().getREALTerminalRuleCall_9()); 
    }
	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTransformationAccess().getSemicolonKeyword_10());
    }
this_REAL_11=RULE_REAL
    { 
    newLeafNode(this_REAL_11, grammarAccess.getTransformationAccess().getREALTerminalRuleCall_11()); 
    }
	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTransformationAccess().getCommaKeyword_12());
    }
this_REAL_13=RULE_REAL
    { 
    newLeafNode(this_REAL_13, grammarAccess.getTransformationAccess().getREALTerminalRuleCall_13()); 
    }
	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTransformationAccess().getCommaKeyword_14());
    }
this_REAL_15=RULE_REAL
    { 
    newLeafNode(this_REAL_15, grammarAccess.getTransformationAccess().getREALTerminalRuleCall_15()); 
    }
	otherlv_16=';' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getTransformationAccess().getSemicolonKeyword_16());
    }
this_REAL_17=RULE_REAL
    { 
    newLeafNode(this_REAL_17, grammarAccess.getTransformationAccess().getREALTerminalRuleCall_17()); 
    }
	otherlv_18=',' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getTransformationAccess().getCommaKeyword_18());
    }
this_REAL_19=RULE_REAL
    { 
    newLeafNode(this_REAL_19, grammarAccess.getTransformationAccess().getREALTerminalRuleCall_19()); 
    }
	otherlv_20=',' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getTransformationAccess().getCommaKeyword_20());
    }
this_REAL_21=RULE_REAL
    { 
    newLeafNode(this_REAL_21, grammarAccess.getTransformationAccess().getREALTerminalRuleCall_21()); 
    }
	otherlv_22=')' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getTransformationAccess().getRightParenthesisKeyword_22());
    }
)
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getColocationConstraintParserRuleCall()); 
    }
    this_ColocationConstraint_0=ruleColocationConstraint
    { 
        $current = $this_ColocationConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleColocationConstraint
entryRuleColocationConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColocationConstraintRule()); }
	 iv_ruleColocationConstraint=ruleColocationConstraint 
	 { $current=$iv_ruleColocationConstraint.current; } 
	 EOF 
;

// Rule ColocationConstraint
ruleColocationConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='colocate' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getColocationConstraintAccess().getColocateKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getColocationConstraintRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getColocationConstraintAccess().getJoint1JointCrossReference_1_0()); 
	}

)
)	otherlv_2='with' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getColocationConstraintAccess().getWithKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getColocationConstraintRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getColocationConstraintAccess().getJoint2JointCrossReference_3_0()); 
	}

)
))
;





RULE_REAL : ('0'..'9')+ '.' ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


