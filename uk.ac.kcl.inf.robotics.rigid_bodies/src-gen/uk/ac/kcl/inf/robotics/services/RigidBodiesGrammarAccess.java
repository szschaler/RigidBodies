/*
 * generated by Xtext
 */
package uk.ac.kcl.inf.robotics.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RigidBodiesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefsInitialDefinitionParserRuleCall_0_0 = (RuleCall)cDefsAssignment_0.eContents().get(0);
		private final Assignment cWorldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWorldEnvironmentParserRuleCall_1_0 = (RuleCall)cWorldAssignment_1.eContents().get(0);
		private final Assignment cBodiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodiesSystemParserRuleCall_2_0 = (RuleCall)cBodiesAssignment_2.eContents().get(0);
		
		//Model:
		//	defs+=InitialDefinition* world=Environment bodies+=System+;
		@Override public ParserRule getRule() { return rule; }

		//defs+=InitialDefinition* world=Environment bodies+=System+
		public Group getGroup() { return cGroup; }

		//defs+=InitialDefinition*
		public Assignment getDefsAssignment_0() { return cDefsAssignment_0; }

		//InitialDefinition
		public RuleCall getDefsInitialDefinitionParserRuleCall_0_0() { return cDefsInitialDefinitionParserRuleCall_0_0; }

		//world=Environment
		public Assignment getWorldAssignment_1() { return cWorldAssignment_1; }

		//Environment
		public RuleCall getWorldEnvironmentParserRuleCall_1_0() { return cWorldEnvironmentParserRuleCall_1_0; }

		//bodies+=System+
		public Assignment getBodiesAssignment_2() { return cBodiesAssignment_2; }

		//System
		public RuleCall getBodiesSystemParserRuleCall_2_0() { return cBodiesSystemParserRuleCall_2_0; }
	}

	public class InitialDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitialDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBaseMatrixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJointTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InitialDefinition:
		//	BaseMatrix | JointType;
		@Override public ParserRule getRule() { return rule; }

		//BaseMatrix | JointType
		public Alternatives getAlternatives() { return cAlternatives; }

		//BaseMatrix
		public RuleCall getBaseMatrixParserRuleCall_0() { return cBaseMatrixParserRuleCall_0; }

		//JointType
		public RuleCall getJointTypeParserRuleCall_1() { return cJointTypeParserRuleCall_1; }
	}

	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGravityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGravityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGravityMatrixParserRuleCall_3_0 = (RuleCall)cGravityAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Environment:
		//	"world" "{" "gravity" gravity= // TODO Check it's actually a three-element vector 
		//	Matrix "}";
		@Override public ParserRule getRule() { return rule; }

		//"world" "{" "gravity" gravity= // TODO Check it's actually a three-element vector 
		//Matrix "}"
		public Group getGroup() { return cGroup; }

		//"world"
		public Keyword getWorldKeyword_0() { return cWorldKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"gravity"
		public Keyword getGravityKeyword_2() { return cGravityKeyword_2; }

		//gravity= // TODO Check it's actually a three-element vector 
		//Matrix
		public Assignment getGravityAssignment_3() { return cGravityAssignment_3; }

		//// TODO Check it's actually a three-element vector 
		//Matrix
		public RuleCall getGravityMatrixParserRuleCall_3_0() { return cGravityMatrixParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsSystemElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//System:
		//	"system" name=ID "{" elements+=SystemElement+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"system" name=ID "{" elements+=SystemElement+ "}"
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=SystemElement+
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//SystemElement
		public RuleCall getElementsSystemElementParserRuleCall_3_0() { return cElementsSystemElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SystemElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConnectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SystemElement:
		//	Body | Connective;
		@Override public ParserRule getRule() { return rule; }

		//Body | Connective
		public Alternatives getAlternatives() { return cAlternatives; }

		//Body
		public RuleCall getBodyParserRuleCall_0() { return cBodyParserRuleCall_0; }

		//Connective
		public RuleCall getConnectiveParserRuleCall_1() { return cConnectiveParserRuleCall_1; }
	}

	public class ConnectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Connective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJointParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExternalLoadParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Connective:
		//	Joint | Constraint | ExternalLoad;
		@Override public ParserRule getRule() { return rule; }

		//Joint | Constraint | ExternalLoad
		public Alternatives getAlternatives() { return cAlternatives; }

		//Joint
		public RuleCall getJointParserRuleCall_0() { return cJointParserRuleCall_0; }

		//Constraint
		public RuleCall getConstraintParserRuleCall_1() { return cConstraintParserRuleCall_1; }

		//ExternalLoad
		public RuleCall getExternalLoadParserRuleCall_2() { return cExternalLoadParserRuleCall_2; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBodyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMassMassParserRuleCall_3_0 = (RuleCall)cMassAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Body:
		//	"body" name=ID "{" // frame = LocalFrame // We're assuming the local frame is attached to the first joint for this body.
		//	mass=Mass "}";
		@Override public ParserRule getRule() { return rule; }

		//"body" name=ID "{" // frame = LocalFrame // We're assuming the local frame is attached to the first joint for this body.
		//mass=Mass "}"
		public Group getGroup() { return cGroup; }

		//"body"
		public Keyword getBodyKeyword_0() { return cBodyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//// frame = LocalFrame // We're assuming the local frame is attached to the first joint for this body.
		//mass=Mass
		public Assignment getMassAssignment_3() { return cMassAssignment_3; }

		//Mass
		public RuleCall getMassMassParserRuleCall_3_0() { return cMassMassParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BodyReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BodyReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cBaseBaseKeyword_0_0 = (Keyword)cBaseAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cRefBodyCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefBodyIDTerminalRuleCall_1_0_1 = (RuleCall)cRefBodyCrossReference_1_0.eContents().get(1);
		
		//BodyReference:
		//	base?="base" | ref=[Body];
		@Override public ParserRule getRule() { return rule; }

		//base?="base" | ref=[Body]
		public Alternatives getAlternatives() { return cAlternatives; }

		//base?="base"
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//"base"
		public Keyword getBaseBaseKeyword_0_0() { return cBaseBaseKeyword_0_0; }

		//ref=[Body]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[Body]
		public CrossReference getRefBodyCrossReference_1_0() { return cRefBodyCrossReference_1_0; }

		//ID
		public RuleCall getRefBodyIDTerminalRuleCall_1_0_1() { return cRefBodyIDTerminalRuleCall_1_0_1; }
	}

	public class MassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueAddExpParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cPositionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPositionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPositionMatrixParserRuleCall_5_0 = (RuleCall)cPositionAssignment_5.eContents().get(0);
		private final Keyword cInertiaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cInertiaAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInertiaMatrixParserRuleCall_7_0 = (RuleCall)cInertiaAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Mass:
		//	"mass" "{" "value" value=AddExp "position" position= // TODO Check it's actually a three-element vector
		//	Matrix "inertia" inertia= // TODO Check it's actually a three-by-four matrix
		//	Matrix "}";
		@Override public ParserRule getRule() { return rule; }

		//"mass" "{" "value" value=AddExp "position" position= // TODO Check it's actually a three-element vector
		//Matrix "inertia" inertia= // TODO Check it's actually a three-by-four matrix
		//Matrix "}"
		public Group getGroup() { return cGroup; }

		//"mass"
		public Keyword getMassKeyword_0() { return cMassKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"value"
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }

		//value=AddExp
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//AddExp
		public RuleCall getValueAddExpParserRuleCall_3_0() { return cValueAddExpParserRuleCall_3_0; }

		//"position"
		public Keyword getPositionKeyword_4() { return cPositionKeyword_4; }

		//position= // TODO Check it's actually a three-element vector
		//Matrix
		public Assignment getPositionAssignment_5() { return cPositionAssignment_5; }

		//// TODO Check it's actually a three-element vector
		//Matrix
		public RuleCall getPositionMatrixParserRuleCall_5_0() { return cPositionMatrixParserRuleCall_5_0; }

		//"inertia"
		public Keyword getInertiaKeyword_6() { return cInertiaKeyword_6; }

		//inertia= // TODO Check it's actually a three-by-four matrix
		//Matrix
		public Assignment getInertiaAssignment_7() { return cInertiaAssignment_7; }

		//// TODO Check it's actually a three-by-four matrix
		//Matrix
		public RuleCall getInertiaMatrixParserRuleCall_7_0() { return cInertiaMatrixParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class JointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Joint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeJointTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cIsStartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cIsStartStartKeyword_4_0 = (Keyword)cIsStartAssignment_4.eContents().get(0);
		private final Keyword cBetweenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBody1Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBody1BodyReferenceParserRuleCall_6_0 = (RuleCall)cBody1Assignment_6.eContents().get(0);
		private final Assignment cRelTrans1Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRelTrans1RelativeTransformationParserRuleCall_7_0 = (RuleCall)cRelTrans1Assignment_7.eContents().get(0);
		private final Keyword cAndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBody2Assignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBody2BodyReferenceParserRuleCall_9_0 = (RuleCall)cBody2Assignment_9.eContents().get(0);
		private final Keyword cStiffnessKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cSpringCoeffKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cSpringCoeffAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cSpringCoeffAddExpParserRuleCall_13_0 = (RuleCall)cSpringCoeffAssignment_13.eContents().get(0);
		private final Keyword cSpringInitKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cSpringInitAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cSpringInitAddExpParserRuleCall_15_0 = (RuleCall)cSpringInitAssignment_15.eContents().get(0);
		private final Keyword cDampViscousKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cDampViscousAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cDampViscousAddExpParserRuleCall_17_0 = (RuleCall)cDampViscousAssignment_17.eContents().get(0);
		private final Keyword cDampCoulombKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Assignment cDampCoulombAssignment_19 = (Assignment)cGroup.eContents().get(19);
		private final RuleCall cDampCoulombAddExpParserRuleCall_19_0 = (RuleCall)cDampCoulombAssignment_19.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_20 = (Keyword)cGroup.eContents().get(20);
		
		//Joint:
		//	"joint" name=ID ":" type=JointType isStart?="start"? "between" body1=BodyReference relTrans1=RelativeTransformation
		//	"and" body2=BodyReference // TODO We probably want to make types more complex to allow them to make stiffness reusable
		//	"stiffness" "{" // TODO Provide better labels for these in the concrete syntax
		//	"springCoeff" springCoeff=AddExp "springInit" springInit=AddExp "dampViscous" dampViscous=AddExp "dampCoulomb"
		//	dampCoulomb=AddExp "}";
		@Override public ParserRule getRule() { return rule; }

		//"joint" name=ID ":" type=JointType isStart?="start"? "between" body1=BodyReference relTrans1=RelativeTransformation
		//"and" body2=BodyReference // TODO We probably want to make types more complex to allow them to make stiffness reusable
		//"stiffness" "{" // TODO Provide better labels for these in the concrete syntax
		//"springCoeff" springCoeff=AddExp "springInit" springInit=AddExp "dampViscous" dampViscous=AddExp "dampCoulomb"
		//dampCoulomb=AddExp "}"
		public Group getGroup() { return cGroup; }

		//"joint"
		public Keyword getJointKeyword_0() { return cJointKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=JointType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//JointType
		public RuleCall getTypeJointTypeParserRuleCall_3_0() { return cTypeJointTypeParserRuleCall_3_0; }

		//isStart?="start"?
		public Assignment getIsStartAssignment_4() { return cIsStartAssignment_4; }

		//"start"
		public Keyword getIsStartStartKeyword_4_0() { return cIsStartStartKeyword_4_0; }

		//"between"
		public Keyword getBetweenKeyword_5() { return cBetweenKeyword_5; }

		//body1=BodyReference
		public Assignment getBody1Assignment_6() { return cBody1Assignment_6; }

		//BodyReference
		public RuleCall getBody1BodyReferenceParserRuleCall_6_0() { return cBody1BodyReferenceParserRuleCall_6_0; }

		//relTrans1=RelativeTransformation
		public Assignment getRelTrans1Assignment_7() { return cRelTrans1Assignment_7; }

		//RelativeTransformation
		public RuleCall getRelTrans1RelativeTransformationParserRuleCall_7_0() { return cRelTrans1RelativeTransformationParserRuleCall_7_0; }

		//"and"
		public Keyword getAndKeyword_8() { return cAndKeyword_8; }

		//body2=BodyReference
		public Assignment getBody2Assignment_9() { return cBody2Assignment_9; }

		//BodyReference
		public RuleCall getBody2BodyReferenceParserRuleCall_9_0() { return cBody2BodyReferenceParserRuleCall_9_0; }

		//// TODO We probably want to make types more complex to allow them to make stiffness reusable
		//"stiffness"
		public Keyword getStiffnessKeyword_10() { return cStiffnessKeyword_10; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }

		//// TODO Provide better labels for these in the concrete syntax
		//"springCoeff"
		public Keyword getSpringCoeffKeyword_12() { return cSpringCoeffKeyword_12; }

		//springCoeff=AddExp
		public Assignment getSpringCoeffAssignment_13() { return cSpringCoeffAssignment_13; }

		//AddExp
		public RuleCall getSpringCoeffAddExpParserRuleCall_13_0() { return cSpringCoeffAddExpParserRuleCall_13_0; }

		//"springInit"
		public Keyword getSpringInitKeyword_14() { return cSpringInitKeyword_14; }

		//springInit=AddExp
		public Assignment getSpringInitAssignment_15() { return cSpringInitAssignment_15; }

		//AddExp
		public RuleCall getSpringInitAddExpParserRuleCall_15_0() { return cSpringInitAddExpParserRuleCall_15_0; }

		//"dampViscous"
		public Keyword getDampViscousKeyword_16() { return cDampViscousKeyword_16; }

		//dampViscous=AddExp
		public Assignment getDampViscousAssignment_17() { return cDampViscousAssignment_17; }

		//AddExp
		public RuleCall getDampViscousAddExpParserRuleCall_17_0() { return cDampViscousAddExpParserRuleCall_17_0; }

		//"dampCoulomb"
		public Keyword getDampCoulombKeyword_18() { return cDampCoulombKeyword_18; }

		//dampCoulomb=AddExp
		public Assignment getDampCoulombAssignment_19() { return cDampCoulombAssignment_19; }

		//AddExp
		public RuleCall getDampCoulombAddExpParserRuleCall_19_0() { return cDampCoulombAddExpParserRuleCall_19_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_20() { return cRightCurlyBracketKeyword_20; }
	}

	public class JointTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JointType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cJointKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cTypeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpJointTypeExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//JointType:
		//	("joint" "type" name=ID)? exp=JointTypeExpression;
		@Override public ParserRule getRule() { return rule; }

		//("joint" "type" name=ID)? exp=JointTypeExpression
		public Group getGroup() { return cGroup; }

		//("joint" "type" name=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//"joint"
		public Keyword getJointKeyword_0_0() { return cJointKeyword_0_0; }

		//"type"
		public Keyword getTypeKeyword_0_1() { return cTypeKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//exp=JointTypeExpression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//JointTypeExpression
		public RuleCall getExpJointTypeExpressionParserRuleCall_1_0() { return cExpJointTypeExpressionParserRuleCall_1_0; }
	}

	public class JointTypeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JointTypeExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cRefJointTypeCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefJointTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cRefJointTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRevoluteKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cAxisAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAxisAXISEnumRuleCall_1_2_0 = (RuleCall)cAxisAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cAxisAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cAxisAXISEnumRuleCall_1_3_1_0 = (RuleCall)cAxisAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPlanarKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAxisAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAxisAXISEnumRuleCall_2_2_0 = (RuleCall)cAxisAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cAxisAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cAxisAXISEnumRuleCall_2_3_1_0 = (RuleCall)cAxisAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//JointTypeExpression:
		//	ref=[JointType] | "revolute" "(" axis+=AXIS ("," axis+=AXIS)* ")" | "planar" "(" axis+=AXIS ("," axis+=AXIS)* ")";
		@Override public ParserRule getRule() { return rule; }

		//ref=[JointType] | "revolute" "(" axis+=AXIS ("," axis+=AXIS)* ")" | "planar" "(" axis+=AXIS ("," axis+=AXIS)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ref=[JointType]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[JointType]
		public CrossReference getRefJointTypeCrossReference_0_0() { return cRefJointTypeCrossReference_0_0; }

		//ID
		public RuleCall getRefJointTypeIDTerminalRuleCall_0_0_1() { return cRefJointTypeIDTerminalRuleCall_0_0_1; }

		//"revolute" "(" axis+=AXIS ("," axis+=AXIS)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//"revolute"
		public Keyword getRevoluteKeyword_1_0() { return cRevoluteKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//axis+=AXIS
		public Assignment getAxisAssignment_1_2() { return cAxisAssignment_1_2; }

		//AXIS
		public RuleCall getAxisAXISEnumRuleCall_1_2_0() { return cAxisAXISEnumRuleCall_1_2_0; }

		//("," axis+=AXIS)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//axis+=AXIS
		public Assignment getAxisAssignment_1_3_1() { return cAxisAssignment_1_3_1; }

		//AXIS
		public RuleCall getAxisAXISEnumRuleCall_1_3_1_0() { return cAxisAXISEnumRuleCall_1_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//"planar" "(" axis+=AXIS ("," axis+=AXIS)* ")"
		public Group getGroup_2() { return cGroup_2; }

		//"planar"
		public Keyword getPlanarKeyword_2_0() { return cPlanarKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//axis+=AXIS
		public Assignment getAxisAssignment_2_2() { return cAxisAssignment_2_2; }

		//AXIS
		public RuleCall getAxisAXISEnumRuleCall_2_2_0() { return cAxisAXISEnumRuleCall_2_2_0; }

		//("," axis+=AXIS)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//axis+=AXIS
		public Assignment getAxisAssignment_2_3_1() { return cAxisAssignment_2_3_1; }

		//AXIS
		public RuleCall getAxisAXISEnumRuleCall_2_3_1_0() { return cAxisAXISEnumRuleCall_2_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
	}

	public class RelativeTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelativeTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRelativeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTransformationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPositionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPositionMatrixParserRuleCall_4_0 = (RuleCall)cPositionAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReorientAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReorientReorientationParserRuleCall_6_0 = (RuleCall)cReorientAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RelativeTransformation:
		//	"(" "with" "relative" "transformation" position=Matrix / * TODO This is a 3D vector * / "," reorient=Reorientation ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" "with" "relative" "transformation" position=Matrix / * TODO This is a 3D vector * / "," reorient=Reorientation ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//"with"
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }

		//"relative"
		public Keyword getRelativeKeyword_2() { return cRelativeKeyword_2; }

		//"transformation"
		public Keyword getTransformationKeyword_3() { return cTransformationKeyword_3; }

		//position=Matrix
		public Assignment getPositionAssignment_4() { return cPositionAssignment_4; }

		//Matrix
		public RuleCall getPositionMatrixParserRuleCall_4_0() { return cPositionMatrixParserRuleCall_4_0; }

		/// * TODO This is a 3D vector * / ","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//reorient=Reorientation
		public Assignment getReorientAssignment_6() { return cReorientAssignment_6; }

		//Reorientation
		public RuleCall getReorientReorientationParserRuleCall_6_0() { return cReorientReorientationParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class ReorientationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reorientation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cReorientKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpReorientExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//Reorientation:
		//	("reorient" name=ID)? exp=ReorientExpression;
		@Override public ParserRule getRule() { return rule; }

		//("reorient" name=ID)? exp=ReorientExpression
		public Group getGroup() { return cGroup; }

		//("reorient" name=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//"reorient"
		public Keyword getReorientKeyword_0_0() { return cReorientKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//exp=ReorientExpression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//ReorientExpression
		public RuleCall getExpReorientExpressionParserRuleCall_1_0() { return cExpReorientExpressionParserRuleCall_1_0; }
	}

	public class ReorientExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReorientExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cRefReorientationCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefReorientationIDTerminalRuleCall_0_0_1 = (RuleCall)cRefReorientationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cReorientExpressionAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cAxisAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cAxisAXISEnumRuleCall_1_2_1_0 = (RuleCall)cAxisAssignment_1_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cValueAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cValueAddExpParserRuleCall_1_2_3_0 = (RuleCall)cValueAssignment_1_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_4 = (Keyword)cGroup_1_2.eContents().get(4);
		private final Group cGroup_1_2_5 = (Group)cGroup_1_2.eContents().get(5);
		private final Keyword cCommaKeyword_1_2_5_0 = (Keyword)cGroup_1_2_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2_5_1 = (Keyword)cGroup_1_2_5.eContents().get(1);
		private final Assignment cAxisAssignment_1_2_5_2 = (Assignment)cGroup_1_2_5.eContents().get(2);
		private final RuleCall cAxisAXISEnumRuleCall_1_2_5_2_0 = (RuleCall)cAxisAssignment_1_2_5_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_2_5_3 = (Keyword)cGroup_1_2_5.eContents().get(3);
		private final Assignment cValueAssignment_1_2_5_4 = (Assignment)cGroup_1_2_5.eContents().get(4);
		private final RuleCall cValueAddExpParserRuleCall_1_2_5_4_0 = (RuleCall)cValueAssignment_1_2_5_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_5_5 = (Keyword)cGroup_1_2_5.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ReorientExpression:
		//	ref=[Reorientation] | "(" {ReorientExpression} ("(" axis+=AXIS "," value+=AddExp ")" ("," "(" axis+=AXIS ","
		//	value+=AddExp ")")*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//ref=[Reorientation] | "(" {ReorientExpression} ("(" axis+=AXIS "," value+=AddExp ")" ("," "(" axis+=AXIS ","
		//value+=AddExp ")")*)? ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ref=[Reorientation]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[Reorientation]
		public CrossReference getRefReorientationCrossReference_0_0() { return cRefReorientationCrossReference_0_0; }

		//ID
		public RuleCall getRefReorientationIDTerminalRuleCall_0_0_1() { return cRefReorientationIDTerminalRuleCall_0_0_1; }

		//"(" {ReorientExpression} ("(" axis+=AXIS "," value+=AddExp ")" ("," "(" axis+=AXIS "," value+=AddExp ")")*)? ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//{ReorientExpression}
		public Action getReorientExpressionAction_1_1() { return cReorientExpressionAction_1_1; }

		//("(" axis+=AXIS "," value+=AddExp ")" ("," "(" axis+=AXIS "," value+=AddExp ")")*)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2_0() { return cLeftParenthesisKeyword_1_2_0; }

		//axis+=AXIS
		public Assignment getAxisAssignment_1_2_1() { return cAxisAssignment_1_2_1; }

		//AXIS
		public RuleCall getAxisAXISEnumRuleCall_1_2_1_0() { return cAxisAXISEnumRuleCall_1_2_1_0; }

		//","
		public Keyword getCommaKeyword_1_2_2() { return cCommaKeyword_1_2_2; }

		//value+=AddExp
		public Assignment getValueAssignment_1_2_3() { return cValueAssignment_1_2_3; }

		//AddExp
		public RuleCall getValueAddExpParserRuleCall_1_2_3_0() { return cValueAddExpParserRuleCall_1_2_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_4() { return cRightParenthesisKeyword_1_2_4; }

		//("," "(" axis+=AXIS "," value+=AddExp ")")*
		public Group getGroup_1_2_5() { return cGroup_1_2_5; }

		//","
		public Keyword getCommaKeyword_1_2_5_0() { return cCommaKeyword_1_2_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2_5_1() { return cLeftParenthesisKeyword_1_2_5_1; }

		//axis+=AXIS
		public Assignment getAxisAssignment_1_2_5_2() { return cAxisAssignment_1_2_5_2; }

		//AXIS
		public RuleCall getAxisAXISEnumRuleCall_1_2_5_2_0() { return cAxisAXISEnumRuleCall_1_2_5_2_0; }

		//","
		public Keyword getCommaKeyword_1_2_5_3() { return cCommaKeyword_1_2_5_3; }

		//value+=AddExp
		public Assignment getValueAssignment_1_2_5_4() { return cValueAssignment_1_2_5_4; }

		//AddExp
		public RuleCall getValueAddExpParserRuleCall_1_2_5_4_0() { return cValueAddExpParserRuleCall_1_2_5_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_5_5() { return cRightParenthesisKeyword_1_2_5_5; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeConstraintTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cBetweenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBody1Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBody1BodyReferenceParserRuleCall_5_0 = (RuleCall)cBody1Assignment_5.eContents().get(0);
		private final Assignment cRelTrans1Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRelTrans1RelativeTransformationParserRuleCall_6_0 = (RuleCall)cRelTrans1Assignment_6.eContents().get(0);
		private final Keyword cAndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBody2Assignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBody2BodyReferenceParserRuleCall_8_0 = (RuleCall)cBody2Assignment_8.eContents().get(0);
		private final Assignment cRelTrans2Assignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRelTrans2RelativeTransformationParserRuleCall_9_0 = (RuleCall)cRelTrans2Assignment_9.eContents().get(0);
		
		//Constraint:
		//	"constraint" name=ID ":" type=ConstraintType "between" body1=BodyReference relTrans1=RelativeTransformation "and"
		//	body2=BodyReference relTrans2=RelativeTransformation;
		@Override public ParserRule getRule() { return rule; }

		//"constraint" name=ID ":" type=ConstraintType "between" body1=BodyReference relTrans1=RelativeTransformation "and"
		//body2=BodyReference relTrans2=RelativeTransformation
		public Group getGroup() { return cGroup; }

		//"constraint"
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=ConstraintType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//ConstraintType
		public RuleCall getTypeConstraintTypeEnumRuleCall_3_0() { return cTypeConstraintTypeEnumRuleCall_3_0; }

		//"between"
		public Keyword getBetweenKeyword_4() { return cBetweenKeyword_4; }

		//body1=BodyReference
		public Assignment getBody1Assignment_5() { return cBody1Assignment_5; }

		//BodyReference
		public RuleCall getBody1BodyReferenceParserRuleCall_5_0() { return cBody1BodyReferenceParserRuleCall_5_0; }

		//relTrans1=RelativeTransformation
		public Assignment getRelTrans1Assignment_6() { return cRelTrans1Assignment_6; }

		//RelativeTransformation
		public RuleCall getRelTrans1RelativeTransformationParserRuleCall_6_0() { return cRelTrans1RelativeTransformationParserRuleCall_6_0; }

		//"and"
		public Keyword getAndKeyword_7() { return cAndKeyword_7; }

		//body2=BodyReference
		public Assignment getBody2Assignment_8() { return cBody2Assignment_8; }

		//BodyReference
		public RuleCall getBody2BodyReferenceParserRuleCall_8_0() { return cBody2BodyReferenceParserRuleCall_8_0; }

		//relTrans2=RelativeTransformation
		public Assignment getRelTrans2Assignment_9() { return cRelTrans2Assignment_9; }

		//RelativeTransformation
		public RuleCall getRelTrans2RelativeTransformationParserRuleCall_9_0() { return cRelTrans2RelativeTransformationParserRuleCall_9_0; }
	}

	public class ExternalLoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalLoad");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLoadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeLoadTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cAtKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBodyReferenceParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cWithKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRelativeKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cTransformationKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cPositionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPositionMatrixParserRuleCall_11_0 = (RuleCall)cPositionAssignment_11.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//ExternalLoad:
		//	"external" "load" name=ID ":" type=LoadType "at" body=BodyReference "(" "with" "relative" "transformation"
		//	position=Matrix ")";
		@Override public ParserRule getRule() { return rule; }

		//"external" "load" name=ID ":" type=LoadType "at" body=BodyReference "(" "with" "relative" "transformation"
		//position=Matrix ")"
		public Group getGroup() { return cGroup; }

		//"external"
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }

		//"load"
		public Keyword getLoadKeyword_1() { return cLoadKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=LoadType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//LoadType
		public RuleCall getTypeLoadTypeEnumRuleCall_4_0() { return cTypeLoadTypeEnumRuleCall_4_0; }

		//"at"
		public Keyword getAtKeyword_5() { return cAtKeyword_5; }

		//body=BodyReference
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//BodyReference
		public RuleCall getBodyBodyReferenceParserRuleCall_6_0() { return cBodyBodyReferenceParserRuleCall_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//"with"
		public Keyword getWithKeyword_8() { return cWithKeyword_8; }

		//"relative"
		public Keyword getRelativeKeyword_9() { return cRelativeKeyword_9; }

		//"transformation"
		public Keyword getTransformationKeyword_10() { return cTransformationKeyword_10; }

		//position=Matrix
		public Assignment getPositionAssignment_11() { return cPositionAssignment_11; }

		//Matrix
		public RuleCall getPositionMatrixParserRuleCall_11_0() { return cPositionMatrixParserRuleCall_11_0; }

		//")"
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}

	public class MatrixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Matrix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBaseMatrixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMatrixRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Matrix:
		//	BaseMatrix | MatrixRef;
		@Override public ParserRule getRule() { return rule; }

		//BaseMatrix | MatrixRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//BaseMatrix
		public RuleCall getBaseMatrixParserRuleCall_0() { return cBaseMatrixParserRuleCall_0; }

		//MatrixRef
		public RuleCall getMatrixRefParserRuleCall_1() { return cMatrixRefParserRuleCall_1; }
	}

	public class BaseMatrixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseMatrix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cMatrixKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesAddExpParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesAddExpParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BaseMatrix:
		//	("matrix" name=ID)? "[" values+=AddExp ("," values+=AddExp)* "]";
		@Override public ParserRule getRule() { return rule; }

		//("matrix" name=ID)? "[" values+=AddExp ("," values+=AddExp)* "]"
		public Group getGroup() { return cGroup; }

		//("matrix" name=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//"matrix"
		public Keyword getMatrixKeyword_0_0() { return cMatrixKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//values+=AddExp
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//AddExp
		public RuleCall getValuesAddExpParserRuleCall_2_0() { return cValuesAddExpParserRuleCall_2_0; }

		//("," values+=AddExp)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=AddExp
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//AddExp
		public RuleCall getValuesAddExpParserRuleCall_3_1_0() { return cValuesAddExpParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class MatrixRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatrixRef");
		private final Assignment cMatrixAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cMatrixBaseMatrixCrossReference_0 = (CrossReference)cMatrixAssignment.eContents().get(0);
		private final RuleCall cMatrixBaseMatrixIDTerminalRuleCall_0_1 = (RuleCall)cMatrixBaseMatrixCrossReference_0.eContents().get(1);
		
		//MatrixRef:
		//	matrix=[BaseMatrix];
		@Override public ParserRule getRule() { return rule; }

		//matrix=[BaseMatrix]
		public Assignment getMatrixAssignment() { return cMatrixAssignment; }

		//[BaseMatrix]
		public CrossReference getMatrixBaseMatrixCrossReference_0() { return cMatrixBaseMatrixCrossReference_0; }

		//ID
		public RuleCall getMatrixBaseMatrixIDTerminalRuleCall_0_1() { return cMatrixBaseMatrixIDTerminalRuleCall_0_1; }
	}

	public class AddExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAddExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AddExp returns Expression:
		//	MultExp ({AddExp.left=current} op+=("+" | "-") right+=MultExp)*;
		@Override public ParserRule getRule() { return rule; }

		//MultExp ({AddExp.left=current} op+=("+" | "-") right+=MultExp)*
		public Group getGroup() { return cGroup; }

		//MultExp
		public RuleCall getMultExpParserRuleCall_0() { return cMultExpParserRuleCall_0; }

		//({AddExp.left=current} op+=("+" | "-") right+=MultExp)*
		public Group getGroup_1() { return cGroup_1; }

		//{AddExp.left=current}
		public Action getAddExpLeftAction_1_0() { return cAddExpLeftAction_1_0; }

		//op+=("+" | "-")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }

		//right+=MultExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//MultExp
		public RuleCall getRightMultExpParserRuleCall_1_2_0() { return cRightMultExpParserRuleCall_1_2_0; }
	}

	public class MultExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultExp returns Expression:
		//	Primary ({MultExp.left=current} op+=("*" | "/") right+=Primary)*;
		@Override public ParserRule getRule() { return rule; }

		//Primary ({MultExp.left=current} op+=("*" | "/") right+=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({MultExp.left=current} op+=("*" | "/") right+=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{MultExp.left=current}
		public Action getMultExpLeftAction_1_0() { return cMultExpLeftAction_1_0; }

		//op+=("*" | "/")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"*" | "/"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }

		//right+=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesisedExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantOrFunctionCallExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary returns Expression:
		//	NumberLiteral | ParenthesisedExp | ConstantOrFunctionCallExp;
		@Override public ParserRule getRule() { return rule; }

		//NumberLiteral | ParenthesisedExp | ConstantOrFunctionCallExp
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }

		//ParenthesisedExp
		public RuleCall getParenthesisedExpParserRuleCall_1() { return cParenthesisedExpParserRuleCall_1; }

		//ConstantOrFunctionCallExp
		public RuleCall getConstantOrFunctionCallExpParserRuleCall_2() { return cConstantOrFunctionCallExpParserRuleCall_2; }
	}

	public class ParenthesisedExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesisedExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpAddExpParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// Need to keep this so that we can regenerate parentheses correctly
		//ParenthesisedExp:
		//	"(" exp=AddExp ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" exp=AddExp ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//exp=AddExp
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//AddExp
		public RuleCall getExpAddExpParserRuleCall_1_0() { return cExpAddExpParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ConstantOrFunctionCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantOrFunctionCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamAddExpParserRuleCall_1_1_0 = (RuleCall)cParamAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParamAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParamAddExpParserRuleCall_1_2_1_0 = (RuleCall)cParamAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ConstantOrFunctionCallExp:
		//	label=ID ("(" param+=AddExp ("," param+=AddExp)* ")")?;
		@Override public ParserRule getRule() { return rule; }

		//label=ID ("(" param+=AddExp ("," param+=AddExp)* ")")?
		public Group getGroup() { return cGroup; }

		//label=ID
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_0_0() { return cLabelIDTerminalRuleCall_0_0; }

		//("(" param+=AddExp ("," param+=AddExp)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//param+=AddExp
		public Assignment getParamAssignment_1_1() { return cParamAssignment_1_1; }

		//AddExp
		public RuleCall getParamAddExpParserRuleCall_1_1_0() { return cParamAddExpParserRuleCall_1_1_0; }

		//("," param+=AddExp)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//param+=AddExp
		public Assignment getParamAssignment_1_2_1() { return cParamAssignment_1_2_1; }

		//AddExp
		public RuleCall getParamAddExpParserRuleCall_1_2_1_0() { return cParamAddExpParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegHyphenMinusKeyword_0_0 = (Keyword)cNegAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumberLiteral:
		//	neg?="-"? value=REAL;
		@Override public ParserRule getRule() { return rule; }

		//neg?="-"? value=REAL
		public Group getGroup() { return cGroup; }

		//neg?="-"?
		public Assignment getNegAssignment_0() { return cNegAssignment_0; }

		//"-"
		public Keyword getNegHyphenMinusKeyword_0_0() { return cNegHyphenMinusKeyword_0_0; }

		//value=REAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_1_0() { return cValueREALTerminalRuleCall_1_0; }
	}
	
	
	public class AXISElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AXIS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cXEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cXXKeyword_0_0 = (Keyword)cXEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cYYKeyword_1_0 = (Keyword)cYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cZEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cZZKeyword_2_0 = (Keyword)cZEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AXIS:
		//	X="x" | Y="y" | Z="z";
		public EnumRule getRule() { return rule; }

		//X="x" | Y="y" | Z="z"
		public Alternatives getAlternatives() { return cAlternatives; }

		//X="x"
		public EnumLiteralDeclaration getXEnumLiteralDeclaration_0() { return cXEnumLiteralDeclaration_0; }

		//"x"
		public Keyword getXXKeyword_0_0() { return cXXKeyword_0_0; }

		//Y="y"
		public EnumLiteralDeclaration getYEnumLiteralDeclaration_1() { return cYEnumLiteralDeclaration_1; }

		//"y"
		public Keyword getYYKeyword_1_0() { return cYYKeyword_1_0; }

		//Z="z"
		public EnumLiteralDeclaration getZEnumLiteralDeclaration_2() { return cZEnumLiteralDeclaration_2; }

		//"z"
		public Keyword getZZKeyword_2_0() { return cZZKeyword_2_0; }
	}

	public class ConstraintTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGEOMETRICALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGEOMETRICALGeometricalKeyword_0_0 = (Keyword)cGEOMETRICALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVELOCITYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVELOCITYVelocityKeyword_1_0 = (Keyword)cVELOCITYEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ConstraintType:
		//	GEOMETRICAL="geometrical" | VELOCITY="velocity";
		public EnumRule getRule() { return rule; }

		//GEOMETRICAL="geometrical" | VELOCITY="velocity"
		public Alternatives getAlternatives() { return cAlternatives; }

		//GEOMETRICAL="geometrical"
		public EnumLiteralDeclaration getGEOMETRICALEnumLiteralDeclaration_0() { return cGEOMETRICALEnumLiteralDeclaration_0; }

		//"geometrical"
		public Keyword getGEOMETRICALGeometricalKeyword_0_0() { return cGEOMETRICALGeometricalKeyword_0_0; }

		//VELOCITY="velocity"
		public EnumLiteralDeclaration getVELOCITYEnumLiteralDeclaration_1() { return cVELOCITYEnumLiteralDeclaration_1; }

		//"velocity"
		public Keyword getVELOCITYVelocityKeyword_1_0() { return cVELOCITYVelocityKeyword_1_0; }
	}

	public class LoadTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LoadType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFORCEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFORCEForceKeyword_0_0 = (Keyword)cFORCEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTORQUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTORQUETorqueKeyword_1_0 = (Keyword)cTORQUEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LoadType:
		//	FORCE="force" | TORQUE="torque";
		public EnumRule getRule() { return rule; }

		//FORCE="force" | TORQUE="torque"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FORCE="force"
		public EnumLiteralDeclaration getFORCEEnumLiteralDeclaration_0() { return cFORCEEnumLiteralDeclaration_0; }

		//"force"
		public Keyword getFORCEForceKeyword_0_0() { return cFORCEForceKeyword_0_0; }

		//TORQUE="torque"
		public EnumLiteralDeclaration getTORQUEEnumLiteralDeclaration_1() { return cTORQUEEnumLiteralDeclaration_1; }

		//"torque"
		public Keyword getTORQUETorqueKeyword_1_0() { return cTORQUETorqueKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final InitialDefinitionElements pInitialDefinition;
	private final EnvironmentElements pEnvironment;
	private final SystemElements pSystem;
	private final SystemElementElements pSystemElement;
	private final ConnectiveElements pConnective;
	private final BodyElements pBody;
	private final BodyReferenceElements pBodyReference;
	private final MassElements pMass;
	private final JointElements pJoint;
	private final JointTypeElements pJointType;
	private final JointTypeExpressionElements pJointTypeExpression;
	private final AXISElements unknownRuleAXIS;
	private final RelativeTransformationElements pRelativeTransformation;
	private final ReorientationElements pReorientation;
	private final ReorientExpressionElements pReorientExpression;
	private final ConstraintElements pConstraint;
	private final ConstraintTypeElements unknownRuleConstraintType;
	private final ExternalLoadElements pExternalLoad;
	private final LoadTypeElements unknownRuleLoadType;
	private final MatrixElements pMatrix;
	private final BaseMatrixElements pBaseMatrix;
	private final MatrixRefElements pMatrixRef;
	private final AddExpElements pAddExp;
	private final MultExpElements pMultExp;
	private final PrimaryElements pPrimary;
	private final ParenthesisedExpElements pParenthesisedExp;
	private final ConstantOrFunctionCallExpElements pConstantOrFunctionCallExp;
	private final NumberLiteralElements pNumberLiteral;
	private final TerminalRule tREAL;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RigidBodiesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pInitialDefinition = new InitialDefinitionElements();
		this.pEnvironment = new EnvironmentElements();
		this.pSystem = new SystemElements();
		this.pSystemElement = new SystemElementElements();
		this.pConnective = new ConnectiveElements();
		this.pBody = new BodyElements();
		this.pBodyReference = new BodyReferenceElements();
		this.pMass = new MassElements();
		this.pJoint = new JointElements();
		this.pJointType = new JointTypeElements();
		this.pJointTypeExpression = new JointTypeExpressionElements();
		this.unknownRuleAXIS = new AXISElements();
		this.pRelativeTransformation = new RelativeTransformationElements();
		this.pReorientation = new ReorientationElements();
		this.pReorientExpression = new ReorientExpressionElements();
		this.pConstraint = new ConstraintElements();
		this.unknownRuleConstraintType = new ConstraintTypeElements();
		this.pExternalLoad = new ExternalLoadElements();
		this.unknownRuleLoadType = new LoadTypeElements();
		this.pMatrix = new MatrixElements();
		this.pBaseMatrix = new BaseMatrixElements();
		this.pMatrixRef = new MatrixRefElements();
		this.pAddExp = new AddExpElements();
		this.pMultExp = new MultExpElements();
		this.pPrimary = new PrimaryElements();
		this.pParenthesisedExp = new ParenthesisedExpElements();
		this.pConstantOrFunctionCallExp = new ConstantOrFunctionCallExpElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.robotics.RigidBodies".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	defs+=InitialDefinition* world=Environment bodies+=System+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//InitialDefinition:
	//	BaseMatrix | JointType;
	public InitialDefinitionElements getInitialDefinitionAccess() {
		return pInitialDefinition;
	}
	
	public ParserRule getInitialDefinitionRule() {
		return getInitialDefinitionAccess().getRule();
	}

	//Environment:
	//	"world" "{" "gravity" gravity= // TODO Check it's actually a three-element vector 
	//	Matrix "}";
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}

	//System:
	//	"system" name=ID "{" elements+=SystemElement+ "}";
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}

	//SystemElement:
	//	Body | Connective;
	public SystemElementElements getSystemElementAccess() {
		return pSystemElement;
	}
	
	public ParserRule getSystemElementRule() {
		return getSystemElementAccess().getRule();
	}

	//Connective:
	//	Joint | Constraint | ExternalLoad;
	public ConnectiveElements getConnectiveAccess() {
		return pConnective;
	}
	
	public ParserRule getConnectiveRule() {
		return getConnectiveAccess().getRule();
	}

	//Body:
	//	"body" name=ID "{" // frame = LocalFrame // We're assuming the local frame is attached to the first joint for this body.
	//	mass=Mass "}";
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//BodyReference:
	//	base?="base" | ref=[Body];
	public BodyReferenceElements getBodyReferenceAccess() {
		return pBodyReference;
	}
	
	public ParserRule getBodyReferenceRule() {
		return getBodyReferenceAccess().getRule();
	}

	//Mass:
	//	"mass" "{" "value" value=AddExp "position" position= // TODO Check it's actually a three-element vector
	//	Matrix "inertia" inertia= // TODO Check it's actually a three-by-four matrix
	//	Matrix "}";
	public MassElements getMassAccess() {
		return pMass;
	}
	
	public ParserRule getMassRule() {
		return getMassAccess().getRule();
	}

	//Joint:
	//	"joint" name=ID ":" type=JointType isStart?="start"? "between" body1=BodyReference relTrans1=RelativeTransformation
	//	"and" body2=BodyReference // TODO We probably want to make types more complex to allow them to make stiffness reusable
	//	"stiffness" "{" // TODO Provide better labels for these in the concrete syntax
	//	"springCoeff" springCoeff=AddExp "springInit" springInit=AddExp "dampViscous" dampViscous=AddExp "dampCoulomb"
	//	dampCoulomb=AddExp "}";
	public JointElements getJointAccess() {
		return pJoint;
	}
	
	public ParserRule getJointRule() {
		return getJointAccess().getRule();
	}

	//JointType:
	//	("joint" "type" name=ID)? exp=JointTypeExpression;
	public JointTypeElements getJointTypeAccess() {
		return pJointType;
	}
	
	public ParserRule getJointTypeRule() {
		return getJointTypeAccess().getRule();
	}

	//JointTypeExpression:
	//	ref=[JointType] | "revolute" "(" axis+=AXIS ("," axis+=AXIS)* ")" | "planar" "(" axis+=AXIS ("," axis+=AXIS)* ")";
	public JointTypeExpressionElements getJointTypeExpressionAccess() {
		return pJointTypeExpression;
	}
	
	public ParserRule getJointTypeExpressionRule() {
		return getJointTypeExpressionAccess().getRule();
	}

	//enum AXIS:
	//	X="x" | Y="y" | Z="z";
	public AXISElements getAXISAccess() {
		return unknownRuleAXIS;
	}
	
	public EnumRule getAXISRule() {
		return getAXISAccess().getRule();
	}

	//RelativeTransformation:
	//	"(" "with" "relative" "transformation" position=Matrix / * TODO This is a 3D vector * / "," reorient=Reorientation ")";
	public RelativeTransformationElements getRelativeTransformationAccess() {
		return pRelativeTransformation;
	}
	
	public ParserRule getRelativeTransformationRule() {
		return getRelativeTransformationAccess().getRule();
	}

	//Reorientation:
	//	("reorient" name=ID)? exp=ReorientExpression;
	public ReorientationElements getReorientationAccess() {
		return pReorientation;
	}
	
	public ParserRule getReorientationRule() {
		return getReorientationAccess().getRule();
	}

	//ReorientExpression:
	//	ref=[Reorientation] | "(" {ReorientExpression} ("(" axis+=AXIS "," value+=AddExp ")" ("," "(" axis+=AXIS ","
	//	value+=AddExp ")")*)? ")";
	public ReorientExpressionElements getReorientExpressionAccess() {
		return pReorientExpression;
	}
	
	public ParserRule getReorientExpressionRule() {
		return getReorientExpressionAccess().getRule();
	}

	//Constraint:
	//	"constraint" name=ID ":" type=ConstraintType "between" body1=BodyReference relTrans1=RelativeTransformation "and"
	//	body2=BodyReference relTrans2=RelativeTransformation;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//enum ConstraintType:
	//	GEOMETRICAL="geometrical" | VELOCITY="velocity";
	public ConstraintTypeElements getConstraintTypeAccess() {
		return unknownRuleConstraintType;
	}
	
	public EnumRule getConstraintTypeRule() {
		return getConstraintTypeAccess().getRule();
	}

	//ExternalLoad:
	//	"external" "load" name=ID ":" type=LoadType "at" body=BodyReference "(" "with" "relative" "transformation"
	//	position=Matrix ")";
	public ExternalLoadElements getExternalLoadAccess() {
		return pExternalLoad;
	}
	
	public ParserRule getExternalLoadRule() {
		return getExternalLoadAccess().getRule();
	}

	//enum LoadType:
	//	FORCE="force" | TORQUE="torque";
	public LoadTypeElements getLoadTypeAccess() {
		return unknownRuleLoadType;
	}
	
	public EnumRule getLoadTypeRule() {
		return getLoadTypeAccess().getRule();
	}

	//Matrix:
	//	BaseMatrix | MatrixRef;
	public MatrixElements getMatrixAccess() {
		return pMatrix;
	}
	
	public ParserRule getMatrixRule() {
		return getMatrixAccess().getRule();
	}

	//BaseMatrix:
	//	("matrix" name=ID)? "[" values+=AddExp ("," values+=AddExp)* "]";
	public BaseMatrixElements getBaseMatrixAccess() {
		return pBaseMatrix;
	}
	
	public ParserRule getBaseMatrixRule() {
		return getBaseMatrixAccess().getRule();
	}

	//MatrixRef:
	//	matrix=[BaseMatrix];
	public MatrixRefElements getMatrixRefAccess() {
		return pMatrixRef;
	}
	
	public ParserRule getMatrixRefRule() {
		return getMatrixRefAccess().getRule();
	}

	//AddExp returns Expression:
	//	MultExp ({AddExp.left=current} op+=("+" | "-") right+=MultExp)*;
	public AddExpElements getAddExpAccess() {
		return pAddExp;
	}
	
	public ParserRule getAddExpRule() {
		return getAddExpAccess().getRule();
	}

	//MultExp returns Expression:
	//	Primary ({MultExp.left=current} op+=("*" | "/") right+=Primary)*;
	public MultExpElements getMultExpAccess() {
		return pMultExp;
	}
	
	public ParserRule getMultExpRule() {
		return getMultExpAccess().getRule();
	}

	//Primary returns Expression:
	//	NumberLiteral | ParenthesisedExp | ConstantOrFunctionCallExp;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//// Need to keep this so that we can regenerate parentheses correctly
	//ParenthesisedExp:
	//	"(" exp=AddExp ")";
	public ParenthesisedExpElements getParenthesisedExpAccess() {
		return pParenthesisedExp;
	}
	
	public ParserRule getParenthesisedExpRule() {
		return getParenthesisedExpAccess().getRule();
	}

	//ConstantOrFunctionCallExp:
	//	label=ID ("(" param+=AddExp ("," param+=AddExp)* ")")?;
	public ConstantOrFunctionCallExpElements getConstantOrFunctionCallExpAccess() {
		return pConstantOrFunctionCallExp;
	}
	
	public ParserRule getConstantOrFunctionCallExpRule() {
		return getConstantOrFunctionCallExpAccess().getRule();
	}

	//NumberLiteral:
	//	neg?="-"? value=REAL;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//// TODO Simplify format, possibly turn into a DataType rule...
	/// *returns ecore::EDouble* / terminal REAL:
	//	"0".."9"+ "." "0".."9"+ (("e" | "E") ("+" | "-") "0".."9"* "." "0".."9"+)?;
	public TerminalRule getREALRule() {
		return tREAL;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
