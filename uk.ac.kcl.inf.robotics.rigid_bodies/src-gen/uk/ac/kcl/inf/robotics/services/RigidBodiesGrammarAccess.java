/*
 * generated by Xtext
 */
package uk.ac.kcl.inf.robotics.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RigidBodiesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cRigidBodiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRigidBodiesRigidBodyParserRuleCall_0 = (RuleCall)cRigidBodiesAssignment.eContents().get(0);
		
		//Model:
		//	rigidBodies+=RigidBody+;
		@Override public ParserRule getRule() { return rule; }

		//rigidBodies+=RigidBody+
		public Assignment getRigidBodiesAssignment() { return cRigidBodiesAssignment; }

		//RigidBody
		public RuleCall getRigidBodiesRigidBodyParserRuleCall_0() { return cRigidBodiesRigidBodyParserRuleCall_0; }
	}

	public class RigidBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RigidBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRigid_bodyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJointsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJointsJointParserRuleCall_3_0 = (RuleCall)cJointsAssignment_3.eContents().get(0);
		private final Assignment cMassesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMassesMassParserRuleCall_4_0 = (RuleCall)cMassesAssignment_4.eContents().get(0);
		private final Assignment cConstraintsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstraintsConstraintParserRuleCall_5_0 = (RuleCall)cConstraintsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RigidBody:
		//	"rigid_body" name=ID "{" joints+=Joint+ masses+=Mass+ constraints+=Constraint* "}";
		@Override public ParserRule getRule() { return rule; }

		//"rigid_body" name=ID "{" joints+=Joint+ masses+=Mass+ constraints+=Constraint* "}"
		public Group getGroup() { return cGroup; }

		//"rigid_body"
		public Keyword getRigid_bodyKeyword_0() { return cRigid_bodyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//joints+=Joint+
		public Assignment getJointsAssignment_3() { return cJointsAssignment_3; }

		//Joint
		public RuleCall getJointsJointParserRuleCall_3_0() { return cJointsJointParserRuleCall_3_0; }

		//masses+=Mass+
		public Assignment getMassesAssignment_4() { return cMassesAssignment_4; }

		//Mass
		public RuleCall getMassesMassParserRuleCall_4_0() { return cMassesMassParserRuleCall_4_0; }

		//constraints+=Constraint*
		public Assignment getConstraintsAssignment_5() { return cConstraintsAssignment_5; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_5_0() { return cConstraintsConstraintParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class JointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Joint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Joint:
		//	"joint" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"joint" name=ID
		public Group getGroup() { return cGroup; }

		//"joint"
		public Keyword getJointKeyword_0() { return cJointKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class MassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueREALTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cKgKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTransformationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTransformationsTransformationParserRuleCall_5_0 = (RuleCall)cTransformationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Mass:
		//	"mass" name=ID value=REAL "kg" "{" transformations+=Transformation+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"mass" name=ID value=REAL "kg" "{" transformations+=Transformation+ "}"
		public Group getGroup() { return cGroup; }

		//"mass"
		public Keyword getMassKeyword_0() { return cMassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//value=REAL
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_2_0() { return cValueREALTerminalRuleCall_2_0; }

		//"kg"
		public Keyword getKgKeyword_3() { return cKgKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//transformations+=Transformation+
		public Assignment getTransformationsAssignment_5() { return cTransformationsAssignment_5; }

		//Transformation
		public RuleCall getTransformationsTransformationParserRuleCall_5_0() { return cTransformationsTransformationParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRelativeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJointAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cJointJointCrossReference_3_0 = (CrossReference)cJointAssignment_3.eContents().get(0);
		private final RuleCall cJointJointIDTerminalRuleCall_3_0_1 = (RuleCall)cJointJointCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cREALTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cREALTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cREALTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cREALTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final RuleCall cREALTerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final RuleCall cREALTerminalRuleCall_15 = (RuleCall)cGroup.eContents().get(15);
		private final Keyword cSemicolonKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final RuleCall cREALTerminalRuleCall_17 = (RuleCall)cGroup.eContents().get(17);
		private final Keyword cCommaKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final RuleCall cREALTerminalRuleCall_19 = (RuleCall)cGroup.eContents().get(19);
		private final Keyword cCommaKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final RuleCall cREALTerminalRuleCall_21 = (RuleCall)cGroup.eContents().get(21);
		private final Keyword cRightParenthesisKeyword_22 = (Keyword)cGroup.eContents().get(22);
		
		//Transformation:
		//	"transformation" "relative" "to" joint=[Joint] "(" REAL "," REAL "," REAL ";" REAL "," REAL "," REAL ";" REAL ","
		//	REAL "," REAL ")";
		@Override public ParserRule getRule() { return rule; }

		//"transformation" "relative" "to" joint=[Joint] "(" REAL "," REAL "," REAL ";" REAL "," REAL "," REAL ";" REAL "," REAL
		//"," REAL ")"
		public Group getGroup() { return cGroup; }

		//"transformation"
		public Keyword getTransformationKeyword_0() { return cTransformationKeyword_0; }

		//"relative"
		public Keyword getRelativeKeyword_1() { return cRelativeKeyword_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//joint=[Joint]
		public Assignment getJointAssignment_3() { return cJointAssignment_3; }

		//[Joint]
		public CrossReference getJointJointCrossReference_3_0() { return cJointJointCrossReference_3_0; }

		//ID
		public RuleCall getJointJointIDTerminalRuleCall_3_0_1() { return cJointJointIDTerminalRuleCall_3_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//REAL
		public RuleCall getREALTerminalRuleCall_5() { return cREALTerminalRuleCall_5; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//REAL
		public RuleCall getREALTerminalRuleCall_7() { return cREALTerminalRuleCall_7; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//REAL
		public RuleCall getREALTerminalRuleCall_9() { return cREALTerminalRuleCall_9; }

		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }

		//REAL
		public RuleCall getREALTerminalRuleCall_11() { return cREALTerminalRuleCall_11; }

		//","
		public Keyword getCommaKeyword_12() { return cCommaKeyword_12; }

		//REAL
		public RuleCall getREALTerminalRuleCall_13() { return cREALTerminalRuleCall_13; }

		//","
		public Keyword getCommaKeyword_14() { return cCommaKeyword_14; }

		//REAL
		public RuleCall getREALTerminalRuleCall_15() { return cREALTerminalRuleCall_15; }

		//";"
		public Keyword getSemicolonKeyword_16() { return cSemicolonKeyword_16; }

		//REAL
		public RuleCall getREALTerminalRuleCall_17() { return cREALTerminalRuleCall_17; }

		//","
		public Keyword getCommaKeyword_18() { return cCommaKeyword_18; }

		//REAL
		public RuleCall getREALTerminalRuleCall_19() { return cREALTerminalRuleCall_19; }

		//","
		public Keyword getCommaKeyword_20() { return cCommaKeyword_20; }

		//REAL
		public RuleCall getREALTerminalRuleCall_21() { return cREALTerminalRuleCall_21; }

		//")"
		public Keyword getRightParenthesisKeyword_22() { return cRightParenthesisKeyword_22; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final RuleCall cColocationConstraintParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Constraint:
		//	ColocationConstraint;
		@Override public ParserRule getRule() { return rule; }

		//ColocationConstraint
		public RuleCall getColocationConstraintParserRuleCall() { return cColocationConstraintParserRuleCall; }
	}

	public class ColocationConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColocationConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColocateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cJoint1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cJoint1JointCrossReference_1_0 = (CrossReference)cJoint1Assignment_1.eContents().get(0);
		private final RuleCall cJoint1JointIDTerminalRuleCall_1_0_1 = (RuleCall)cJoint1JointCrossReference_1_0.eContents().get(1);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJoint2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cJoint2JointCrossReference_3_0 = (CrossReference)cJoint2Assignment_3.eContents().get(0);
		private final RuleCall cJoint2JointIDTerminalRuleCall_3_0_1 = (RuleCall)cJoint2JointCrossReference_3_0.eContents().get(1);
		
		//ColocationConstraint:
		//	"colocate" joint1=[Joint] "with" joint2=[Joint];
		@Override public ParserRule getRule() { return rule; }

		//"colocate" joint1=[Joint] "with" joint2=[Joint]
		public Group getGroup() { return cGroup; }

		//"colocate"
		public Keyword getColocateKeyword_0() { return cColocateKeyword_0; }

		//joint1=[Joint]
		public Assignment getJoint1Assignment_1() { return cJoint1Assignment_1; }

		//[Joint]
		public CrossReference getJoint1JointCrossReference_1_0() { return cJoint1JointCrossReference_1_0; }

		//ID
		public RuleCall getJoint1JointIDTerminalRuleCall_1_0_1() { return cJoint1JointIDTerminalRuleCall_1_0_1; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//joint2=[Joint]
		public Assignment getJoint2Assignment_3() { return cJoint2Assignment_3; }

		//[Joint]
		public CrossReference getJoint2JointCrossReference_3_0() { return cJoint2JointCrossReference_3_0; }

		//ID
		public RuleCall getJoint2JointIDTerminalRuleCall_3_0_1() { return cJoint2JointIDTerminalRuleCall_3_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final RigidBodyElements pRigidBody;
	private final JointElements pJoint;
	private final MassElements pMass;
	private final TransformationElements pTransformation;
	private final ConstraintElements pConstraint;
	private final ColocationConstraintElements pColocationConstraint;
	private final TerminalRule tREAL;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RigidBodiesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRigidBody = new RigidBodyElements();
		this.pJoint = new JointElements();
		this.pMass = new MassElements();
		this.pTransformation = new TransformationElements();
		this.pConstraint = new ConstraintElements();
		this.pColocationConstraint = new ColocationConstraintElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.robotics.RigidBodies".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	rigidBodies+=RigidBody+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//RigidBody:
	//	"rigid_body" name=ID "{" joints+=Joint+ masses+=Mass+ constraints+=Constraint* "}";
	public RigidBodyElements getRigidBodyAccess() {
		return pRigidBody;
	}
	
	public ParserRule getRigidBodyRule() {
		return getRigidBodyAccess().getRule();
	}

	//Joint:
	//	"joint" name=ID;
	public JointElements getJointAccess() {
		return pJoint;
	}
	
	public ParserRule getJointRule() {
		return getJointAccess().getRule();
	}

	//Mass:
	//	"mass" name=ID value=REAL "kg" "{" transformations+=Transformation+ "}";
	public MassElements getMassAccess() {
		return pMass;
	}
	
	public ParserRule getMassRule() {
		return getMassAccess().getRule();
	}

	//Transformation:
	//	"transformation" "relative" "to" joint=[Joint] "(" REAL "," REAL "," REAL ";" REAL "," REAL "," REAL ";" REAL ","
	//	REAL "," REAL ")";
	public TransformationElements getTransformationAccess() {
		return pTransformation;
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}

	//Constraint:
	//	ColocationConstraint;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//ColocationConstraint:
	//	"colocate" joint1=[Joint] "with" joint2=[Joint];
	public ColocationConstraintElements getColocationConstraintAccess() {
		return pColocationConstraint;
	}
	
	public ParserRule getColocationConstraintRule() {
		return getColocationConstraintAccess().getRule();
	}

	//terminal REAL returns ecore::EDouble:
	//	"0".."9"+ "." "0".."9"*;
	public TerminalRule getREALRule() {
		return tREAL;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
