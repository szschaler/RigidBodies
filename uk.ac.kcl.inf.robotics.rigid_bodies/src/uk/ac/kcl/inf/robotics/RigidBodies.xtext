grammar uk.ac.kcl.inf.robotics.RigidBodies with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate rigidBodies "http://www.ac.uk/kcl/inf/robotics/RigidBodies"

Model:
	defs += InitialDefinition*
	world = Environment
	bodies += System+
;
	
InitialDefinition:
	BaseMatrix |
	JointType |
	BaseStiffnessExp
;	
	
Environment:
	'world' '{'
		'gravity' gravity=Matrix // TODO Check it's actually a three-element vector 
	'}'
;

System:
	'system' name=ID '{'
		elements += SystemElement+
	'}'
;

SystemElement:
	Body |
	Connective |
	BodyRepetition
;

Connective:
	Joint |
	Constraint |
	ExternalLoad
;

Body:
	'body' name=ID '{'
		// frame = LocalFrame // We're assuming the local frame is attached to the first joint for this body.
		mass  = Mass 
	'}'
;

BodyReference:
	base?='base' |
	ref=[Body]
;

BodyRepetition:
	"repeat" number=INT "of" body=[Body] "{"
		connectionExp += Connective+ 
	"}"
;

Mass:
	'mass' '{' 
		'value' value = AddExp
		'position' position = Matrix // TODO Check it's actually a three-element vector
		'inertia' inertia = Matrix // TODO Check it's actually a three-by-four matrix
	'}'
;

Joint:
	'joint' name=ID ':' type=JointType isStart?='start'?
		'between' body1 = BodyReference relTrans1 = RelativeTransformation
		'and' body2 = BodyReference
;

JointType:
	('joint' 'type' name=ID)? exp=AdditiveJointType
;

AdditiveJointType returns JointTypeExpression:
	PrimaryJointType ('+' {AdditiveJointType.left = current} right += PrimaryJointType)*
;

PrimaryJointType returns JointTypeExpression:
	JointTypeReference |
	BasicJointType
;

JointTypeReference:
	ref=[JointType]
;

BasicJointType:
	type = JointMovement 'with' stiffness = StiffnessExp 
;

JointMovement:
	Revolute | 
	Planar
;

Revolute:
	'revolute' axis=AXIS 
;

Planar:
	'planar' axis=AXIS 
;

StiffnessExp:
	StiffnessRef |
	BaseStiffnessExp
;

StiffnessRef:
	ref = [BaseStiffnessExp]
;

BaseStiffnessExp:
	('stiffness' name=ID)? '{'
		// TODO Provide better labels for these in the concrete syntax
		'springCoeff' springCoeff = AddExp
		'springInit' springInit = AddExp
		'dampViscous' dampViscous = AddExp
		'dampCoulomb' dampCoulomb = AddExp
	 '}'	
;

enum AXIS: 
	X = 'x' | Y = 'y' | Z = 'z'
;

RelativeTransformation:
	'(' 'with' 'relative' 'transformation' position=Matrix /* TODO This is a 3D vector */ ',' reorient=Reorientation ')'
;

Reorientation:
	('reorient' name=ID)? exp=ReorientExpression
;

ReorientExpression:
	ReorientRef |
	BasicReorientExpression
;

ReorientRef:
	ref=[Reorientation] 
;

BasicReorientExpression:
	'(' {BasicReorientExpression} ('(' axis+=AXIS ',' value += AddExp ')' (',' '(' axis+=AXIS ',' value += AddExp ')')*)? ')' 
;

Constraint:
	'constraint' name=ID ':' type = ConstraintType
		'between' body1 = BodyReference relTrans1 = RelativeTransformation
		'and' body2 = BodyReference relTrans2 = RelativeTransformation
;

enum ConstraintType:
	GEOMETRICAL = 'geometrical' |
	VELOCITY = 'velocity'
;

ExternalLoad:
	'external' 'load' name=ID ':' type = LoadType
		'at' body1 = BodyReference '(' 'with' 'relative' 'transformation' position=Matrix ')'	
;

enum LoadType:
	FORCE = 'force' |
	TORQUE = 'torque'
;

Matrix:
	BaseMatrix |
	MatrixRef
;

BaseMatrix:
	('matrix' name=ID)? '[' values+=AddExp (',' values+=AddExp)* ']'
;

MatrixRef:
	matrix=[BaseMatrix]
;

AddExp returns Expression:
	MultExp ({AddExp.left=current} op += ('+'|'-') right += MultExp)*
;

MultExp returns Expression:
	Primary ({MultExp.left=current} op += ('*'|'/') right += Primary)*
;

Primary returns Expression:
	NumberLiteral |
	ParenthesisedExp |
	ConstantOrFunctionCallExp
;

// Need to keep this so that we can regenerate parentheses correctly
ParenthesisedExp:
	'(' exp=AddExp ')'
;

ConstantOrFunctionCallExp:
	label=ID ('(' param += AddExp (',' param += AddExp)* ')')?
;

NumberLiteral:
	neg?='-'? value=REAL
;

// TODO Simplify format, possibly turn into a DataType rule...
terminal REAL /*returns ecore::EDouble*/: ('0'..'9')+ '.' ('0'..'9')+ (('e'|'E') ('+'|'-') ('0'..'9')+)?;