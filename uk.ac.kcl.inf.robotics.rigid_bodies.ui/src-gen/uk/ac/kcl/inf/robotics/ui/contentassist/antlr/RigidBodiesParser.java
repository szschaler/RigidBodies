/*
 * generated by Xtext
 */
package uk.ac.kcl.inf.robotics.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import uk.ac.kcl.inf.robotics.services.RigidBodiesGrammarAccess;

public class RigidBodiesParser extends AbstractContentAssistParser {
	
	@Inject
	private RigidBodiesGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected uk.ac.kcl.inf.robotics.ui.contentassist.antlr.internal.InternalRigidBodiesParser createParser() {
		uk.ac.kcl.inf.robotics.ui.contentassist.antlr.internal.InternalRigidBodiesParser result = new uk.ac.kcl.inf.robotics.ui.contentassist.antlr.internal.InternalRigidBodiesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInitialDefinitionAccess().getAlternatives(), "rule__InitialDefinition__Alternatives");
					put(grammarAccess.getSystemElementAccess().getAlternatives(), "rule__SystemElement__Alternatives");
					put(grammarAccess.getVector3Access().getAlternatives(), "rule__Vector3__Alternatives");
					put(grammarAccess.getMatrix3X3Access().getAlternatives(), "rule__Matrix3X3__Alternatives");
					put(grammarAccess.getMatrix4X4Access().getAlternatives(), "rule__Matrix4X4__Alternatives");
					put(grammarAccess.getMatrixDefAccess().getAlternatives(), "rule__MatrixDef__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getEnvironmentAccess().getGroup(), "rule__Environment__Group__0");
					put(grammarAccess.getSystemAccess().getGroup(), "rule__System__Group__0");
					put(grammarAccess.getBodyAccess().getGroup(), "rule__Body__Group__0");
					put(grammarAccess.getLocalFrameAccess().getGroup(), "rule__LocalFrame__Group__0");
					put(grammarAccess.getMassAccess().getGroup(), "rule__Mass__Group__0");
					put(grammarAccess.getJointAccess().getGroup(), "rule__Joint__Group__0");
					put(grammarAccess.getColocationConstraintAccess().getGroup(), "rule__ColocationConstraint__Group__0");
					put(grammarAccess.getBaseVector3Access().getGroup(), "rule__BaseVector3__Group__0");
					put(grammarAccess.getBaseVector3Access().getGroup_0(), "rule__BaseVector3__Group_0__0");
					put(grammarAccess.getBaseMatrix3X3Access().getGroup(), "rule__BaseMatrix3X3__Group__0");
					put(grammarAccess.getBaseMatrix3X3Access().getGroup_0(), "rule__BaseMatrix3X3__Group_0__0");
					put(grammarAccess.getBaseMatrix4X4Access().getGroup(), "rule__BaseMatrix4X4__Group__0");
					put(grammarAccess.getBaseMatrix4X4Access().getGroup_0(), "rule__BaseMatrix4X4__Group_0__0");
					put(grammarAccess.getModelAccess().getDefsAssignment_0(), "rule__Model__DefsAssignment_0");
					put(grammarAccess.getModelAccess().getWorldAssignment_1(), "rule__Model__WorldAssignment_1");
					put(grammarAccess.getModelAccess().getBodiesAssignment_2(), "rule__Model__BodiesAssignment_2");
					put(grammarAccess.getEnvironmentAccess().getGravityAssignment_3(), "rule__Environment__GravityAssignment_3");
					put(grammarAccess.getSystemAccess().getNameAssignment_1(), "rule__System__NameAssignment_1");
					put(grammarAccess.getSystemAccess().getElementsAssignment_3(), "rule__System__ElementsAssignment_3");
					put(grammarAccess.getBodyAccess().getNameAssignment_1(), "rule__Body__NameAssignment_1");
					put(grammarAccess.getBodyAccess().getFrameAssignment_3(), "rule__Body__FrameAssignment_3");
					put(grammarAccess.getBodyAccess().getMassAssignment_4(), "rule__Body__MassAssignment_4");
					put(grammarAccess.getLocalFrameAccess().getOrientationAssignment_4(), "rule__LocalFrame__OrientationAssignment_4");
					put(grammarAccess.getLocalFrameAccess().getPositionAssignment_6(), "rule__LocalFrame__PositionAssignment_6");
					put(grammarAccess.getMassAccess().getValueAssignment_3(), "rule__Mass__ValueAssignment_3");
					put(grammarAccess.getMassAccess().getPositionAssignment_5(), "rule__Mass__PositionAssignment_5");
					put(grammarAccess.getMassAccess().getInertiaAssignment_7(), "rule__Mass__InertiaAssignment_7");
					put(grammarAccess.getJointAccess().getNameAssignment_1(), "rule__Joint__NameAssignment_1");
					put(grammarAccess.getJointAccess().getTypeAssignment_3(), "rule__Joint__TypeAssignment_3");
					put(grammarAccess.getJointAccess().getBody1Assignment_5(), "rule__Joint__Body1Assignment_5");
					put(grammarAccess.getJointAccess().getRelTransformation1Assignment_10(), "rule__Joint__RelTransformation1Assignment_10");
					put(grammarAccess.getJointAccess().getBody2Assignment_13(), "rule__Joint__Body2Assignment_13");
					put(grammarAccess.getJointAccess().getRelTransformation2Assignment_18(), "rule__Joint__RelTransformation2Assignment_18");
					put(grammarAccess.getColocationConstraintAccess().getJoint1Assignment_1(), "rule__ColocationConstraint__Joint1Assignment_1");
					put(grammarAccess.getColocationConstraintAccess().getJoint2Assignment_3(), "rule__ColocationConstraint__Joint2Assignment_3");
					put(grammarAccess.getBaseVector3Access().getNameAssignment_0_1(), "rule__BaseVector3__NameAssignment_0_1");
					put(grammarAccess.getVector3RefAccess().getVectorAssignment(), "rule__Vector3Ref__VectorAssignment");
					put(grammarAccess.getBaseMatrix3X3Access().getNameAssignment_0_1(), "rule__BaseMatrix3X3__NameAssignment_0_1");
					put(grammarAccess.getMatrix3X3RefAccess().getMatrixAssignment(), "rule__Matrix3X3Ref__MatrixAssignment");
					put(grammarAccess.getBaseMatrix4X4Access().getNameAssignment_0_1(), "rule__BaseMatrix4X4__NameAssignment_0_1");
					put(grammarAccess.getMatrix4X4RefAccess().getMatrixAssignment(), "rule__Matrix4X4Ref__MatrixAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			uk.ac.kcl.inf.robotics.ui.contentassist.antlr.internal.InternalRigidBodiesParser typedParser = (uk.ac.kcl.inf.robotics.ui.contentassist.antlr.internal.InternalRigidBodiesParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RigidBodiesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RigidBodiesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
